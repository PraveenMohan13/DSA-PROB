Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.
====================================================================================================================================
class Solution {
    public static int fun(String s) {
        int n=s.length();
        Stack<Integer> st=new Stack<>();
        int ans=0;
        st.push(-1);
        for(int i=0;i<n;i++)
        {
            char c=s.charAt(i);
            if(c=='(')
                st.push(i);
            else
            {
                if(!st.empty())
                    st.pop();
                if(!st.empty())
                    ans=Math.max(ans,i-st.peek());
                else
                    st.push(i);
            }
        }
        return ans;
        
    }
	public static void main(String[] args)
	{
		Scanner z=new Scanner(System.in);
        String str=z.next();
		System.out.println(fun(str));
	}
}
