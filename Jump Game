Sample Input 1

5
3 2 1 0 4
Sample Output 1

false
Explanation 1

You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
Contest ends in 10 days
Submissions: 168
Max Score: 10
Difficulty: Medium
Rate This Challenge:

    
More
 
1
#include <stdio.h>
2
#include <string.h>
3
#include <math.h>
4
#include <stdlib.h>
5
​
6
int main() {
7
​
8
    int    
9
    return 0;
10
}
11
​
Line: 1 Col: 1
Run Code Submit CodeUpload Code as File 
Test against custom input
Interview Prep | Blog | Scoring | Environment | FAQ | About Us | Support | Careers | Terms Of Service | Privacy Policy |

You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

Input Format

First line of each test case or query contains an integer 'N' representing the size of the first array/list.
Second line contains 'N' single space separated integers representing the elements in the array/list.
Constraints

1 <= nums.length <= 10^4
0 <= nums[i] <= 10^5
Output Format

Print true or false
Sample Input 0

5
2 3 1 1 4
Sample Output 0

true
Sample Input 1

5
3 2 1 0 4
Sample Output 1

false
Explanation 1

You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
=======================================================================================================================================================
import java.io.*;
import java.util.*;

public class Solution {
    int n;
    static int a[];
    Solution(int n)
    {
        this.n=n;
        a=new int[n];
    }
    
    boolean fun()
    {int ans=0;
        for(int i=0;i<n;i++)
        {
            if(i>ans)
                return false;
            
            ans=Math.max(ans,i+a[i]);
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner z=new Scanner(System.in);
        int n=z.nextInt();
        Solution o=new Solution(n); 
        for(int i=0;i<n;i++)
            a[i]=z.nextInt();
        System.out.print(o.fun());
    }
}
